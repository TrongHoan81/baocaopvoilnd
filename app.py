# -*- coding: utf-8 -*-
from flask import Flask, render_template, request, jsonify, Response, send_file, stream_with_context
import io
from datetime import datetime
import pandas as pd
import os
import requests

# Load .env s·ªõm ƒë·ªÉ ƒë·ªçc c√°c bi·∫øn c·∫•u h√¨nh
from dotenv import load_dotenv
load_dotenv()

# B·∫£o v·ªá API n·ªôi b·ªô
from security import require_internal_api_key

# Google
import gspread
from googleapiclient.discovery import build

# Modules nghi·ªáp v·ª• (GI·ªÆ NGUY√äN)
import config
import google_handler
import reconciliation_handler

# C·∫•u h√¨nh PROXY (Render) vs DIRECT (VPS/Local)
PROXY_MODE = os.getenv("PROXY_DOWNLOAD_VIA_VPS", "0") == "1"
VPS_BASE_URL = os.getenv("VPS_BASE_URL", "").rstrip("/")
VPS_KEY = os.getenv("VPS_INTERNAL_API_KEY", "")
PROXY_TIMEOUT = int(os.getenv("PROXY_TIMEOUT_SECONDS", "1200"))  # gi√¢y

# Tasks (generator ph√°t SSE ‚Äì GI·ªÆ NGUY√äN)
from tasks import download_report_generator

# ========== L·ªöP 2: JOB MANAGER (VPS) ==========
# M·ª•c ti√™u: n·∫øu client r·ªõt k·∫øt n·ªëi r·ªìi k·∫øt n·ªëi l·∫°i c√πng report_date,
# s·∫Ω "b·∫Øt" ti·∫øp job ƒëang ch·∫°y, kh√¥ng kh·ªüi ƒë·ªông l·∫°i t·ª´ ƒë·∫ßu.
import threading, queue, time
from collections import deque

class StreamJob:
    def __init__(self, report_date):
        self.report_date = report_date
        self.thread = None
        self.subscribers = []            # list[queue.Queue[str]]
        self.buffer = deque(maxlen=500)  # l∆∞u 500 d√≤ng g·∫ßn nh·∫•t
        self.lock = threading.Lock()
        self.done = False

    def start_if_needed(self):
        with self.lock:
            if self.thread and self.thread.is_alive():
                return
            self.thread = threading.Thread(target=self._run, daemon=True)
            self.thread.start()

    def _run(self):
        try:
            # G·ª£i √Ω client retry sau 3s n·∫øu r·ªõt
            self._broadcast_line("retry: 3000")
            # Ph√°t lu·ªìng log nghi·ªáp v·ª•
            for raw_chunk in download_report_generator(self.report_date):
                # raw_chunk th∆∞·ªùng ƒë√£ ch·ª©a "data: ..." + "\n\n" ho·∫∑c chu·ªói nhi·ªÅu d√≤ng
                for line in raw_chunk.splitlines():
                    self._broadcast_line(line)

                # Khi th·∫•y FINAL_MESSAGE ho·∫∑c ERROR th√¨ ƒë√°nh d·∫•u done
                if "FINAL_MESSAGE:" in raw_chunk or "ERROR:" in raw_chunk:
                    self.done = True
        except Exception as e:
            self._broadcast_line(f'data: ERROR:{{"status":"error","message":"Job crash: {str(e)}"}}')
        finally:
            self.done = True

    def _broadcast_line(self, line: str):
        # l∆∞u buffer
        self.buffer.append(line)
        # g·ª≠i cho m·ªçi subscriber
        dead = []
        for q in self.subscribers:
            try:
                q.put_nowait(line)
            except Exception:
                dead.append(q)
        # d·ªçn subscriber l·ªói
        if dead:
            self.subscribers = [q for q in self.subscribers if q not in dead]

    def subscribe(self):
        q = queue.Queue(maxsize=1000)
        with self.lock:
            # ƒë·∫©y buffer s·∫µn c√≥ cho subscriber m·ªõi
            for line in self.buffer:
                try:
                    q.put_nowait(line)
                except Exception:
                    break
            self.subscribers.append(q)
        return q

# Registry to√†n c·ª•c cho c√°c job theo ng√†y
JOBS = {}
JOBS_LOCK = threading.Lock()

def get_or_create_job(report_date):
    key = report_date.strftime("%Y-%m-%d")
    with JOBS_LOCK:
        job = JOBS.get(key)
        if not job:
            job = StreamJob(report_date)
            JOBS[key] = job
    job.start_if_needed()
    return job

# ========== APP ==========
app = Flask(__name__)

@app.route('/')
def index():
    """Hi·ªÉn th·ªã trang giao di·ªán ch√≠nh."""
    return render_template('index.html')

# ==========================
# 1) ROUTE N·ªòI B·ªò TR√äN VPS
# ==========================
@app.get("/internal/download_report_stream")
@require_internal_api_key()
def internal_download_report_stream():
    """
    Endpoint N·ªòI B·ªò tr√™n VPS: nhi·ªÅu client c√≥ th·ªÉ 'b·∫Øt' c√πng m·ªôt job ƒëang ch·∫°y.
    - N·∫øu job ƒë√£ ch·∫°y: g·∫Øn v√†o job hi·ªán t·∫°i (kh√¥ng ch·∫°y l·∫°i).
    - N·∫øu ch∆∞a c√≥: kh·ªüi ƒë·ªông job m·ªõi cho report_date.
    """
    report_date_str = request.args.get('report_date', '').strip()
    if not report_date_str:
        def error_generator():
            yield 'data: {"status": "error", "message": "Vui l√≤ng ch·ªçn ng√†y b√°o c√°o."}\n\n'
        return Response(error_generator(), mimetype='text/event-stream')

    report_date = datetime.strptime(report_date_str, '%Y-%m-%d')
    job = get_or_create_job(report_date)
    q = job.subscribe()

    def stream():
        last = time.monotonic()
        while True:
            try:
                line = q.get(timeout=3)  # l·∫•y d√≤ng m·ªõi n·∫øu c√≥
                yield line + "\n"
                last = time.monotonic()
            except queue.Empty:
                # N·∫øu job ƒë√£ xong v√† kh√¥ng c√≤n d√≤ng m·ªõi -> k·∫øt th√∫c
                if job.done:
                    break
                # im l·∫∑ng > 10s -> b∆°m heartbeat ƒë·ªÉ gi·ªØ k·∫øt n·ªëi d√†i
                now = time.monotonic()
                if now - last > 10:
                    yield "data: üíì heartbeat\n\n"
                    last = now
        # k·∫øt th√∫c event
        yield "\n"

    return Response(
        stream_with_context(stream()),
        mimetype='text/event-stream',
        headers={"Cache-Control": "no-cache", "Connection": "keep-alive", "X-Accel-Buffering": "no"},
    )

# =====================================
# 2) ROUTE UI ‚Äì DIRECT ho·∫∑c PROXY (ENV)
# =====================================
@app.route('/download_report_stream')
def download_report_stream():
    """
    Endpoint ƒë·ªÉ t·∫£i b√°o c√°o v√† truy·ªÅn log v·ªÅ giao di·ªán:
      - DIRECT (local/VPS): g·ªçi th·∫≥ng generator.
      - PROXY (Render): stream t·ª´ VPS k√®m HEARTBEAT ƒë·ªÉ tr√°nh timeout/ƒë·ª©t SSE.
    """
    report_date_str = request.args.get('report_date', '').strip()
    if not report_date_str:
        def error_generator():
            yield 'data: {"status": "error", "message": "Vui l√≤ng ch·ªçn ng√†y b√°o c√°o."}\n\n'
        return Response(error_generator(), mimetype='text/event-stream')

    # === Nh√°nh PROXY: d√πng tr√™n Render ===
    if PROXY_MODE:
        if not VPS_BASE_URL or not VPS_KEY:
            def misconf():
                yield 'data: {"status": "error", "message": "Proxy thi·∫øu VPS_BASE_URL ho·∫∑c VPS_INTERNAL_API_KEY."}\n\n'
            return Response(misconf(), mimetype='text/event-stream')

        try:
            # ƒê·∫∑t timeout d·∫°ng (connect, read). Read-timeout ng·∫Øn ƒë·ªÉ c√≥ th·ªÉ b∆°m heartbeat khi im l·∫∑ng.
            upstream = requests.get(
                f"{VPS_BASE_URL}/internal/download_report_stream",
                params={"report_date": report_date_str},
                headers={"X-Internal-Api-Key": VPS_KEY, "Accept": "text/event-stream"},
                stream=True,
                timeout=(10, 20),  # connect=10s, read=20s -> im >20s s·∫Ω raise ReadTimeout
            )
        except requests.RequestException as ex:
            def err_gen():
                yield f'data: ERROR:{{"status":"error","message":"Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c VPS: {str(ex)}"}}\n\n'
            return Response(err_gen(), mimetype='text/event-stream')

        def generate():
            """
            Proxy SSE v·ªõi HEARTBEAT:
            - ƒê·ªçc t·ª´ng byte t·ª´ upstream; khi ƒë·ªß d√≤ng th√¨ forward ngay cho tr√¨nh duy·ªát.
            - N·∫øu im l·∫∑ng > read-timeout (20s) -> requests n√©m ReadTimeout -> b∆°m heartbeat v√† ti·∫øp t·ª•c ƒë·ªçc.
            """
            from requests.exceptions import ReadTimeout
            upstream.raw.decode_content = True
            buffer = ""
            while True:
                try:
                    chunk = upstream.raw.read(1)  # ƒë·ªçc 1 byte ƒë·ªÉ ph·∫£n ·ª©ng nhanh
                    if not chunk:
                        break  # upstream ƒë√≥ng k·∫øt n·ªëi
                    try:
                        s = chunk.decode('utf-8', errors='ignore')
                    except Exception:
                        s = str(chunk)
                    buffer += s

                    if "\n" in buffer:
                        parts = buffer.split("\n")
                        buffer = parts.pop()
                        for line in parts:
                            yield line + "\n"

                except ReadTimeout:
                    # Kh√¥ng nh·∫≠n d·ªØ li·ªáu m·ªõi trong 20s -> g·ª≠i heartbeat ƒë·ªÉ gi·ªØ k·∫øt n·ªëi ph√≠a Render/Gunicorn
                    yield "data: üíì heartbeat\n\n"
                    continue

            # K·∫øt th√∫c stream
            if buffer:
                yield buffer + ("\n" if not buffer.endswith("\n") else "")
            yield "\n"

        return Response(
            stream_with_context(generate()),
            mimetype="text/event-stream",
            headers={"Cache-Control": "no-cache", "Connection": "keep-alive", "X-Accel-Buffering": "no"},
        )

    # === Nh√°nh DIRECT: local PC / VPS ch·∫°y tr·ª±c ti·∫øp nh∆∞ c≈© ===
    report_date = datetime.strptime(report_date_str, '%Y-%m-%d')
    return Response(
        stream_with_context(download_report_generator(report_date)),
        mimetype='text/event-stream',
        headers={"Cache-Control": "no-cache", "Connection": "keep-alive", "X-Accel-Buffering": "no"},
    )

# ====================
# 3) C√ÅC ROUTE KH√ÅC
# ====================
@app.route('/reconcile', methods=['POST'])
def reconcile():
    """X·ª≠ l√Ω y√™u c·∫ßu ƒë·ªëi so√°t: SanLuong | TienMat | CongNo."""
    try:
        reconcile_date_str = request.form.get('reconcile_date')
        reconcile_type = request.form.get('reconcile_type')

        if not reconcile_date_str:
            return jsonify({"status": "error", "message": "Vui l√≤ng ch·ªçn ng√†y ƒë·ªëi so√°t."}), 400
        if 'accounting_file' not in request.files:
            return jsonify({"status": "error", "message": "Vui l√≤ng t·∫£i l√™n file t·ª´ ph·∫ßn m·ªÅm k·∫ø to√°n."}), 400

        sse_file = request.files['accounting_file']
        reconcile_date = datetime.strptime(reconcile_date_str, '%Y-%m-%d')
        date_str_dmy = reconcile_date.strftime('%d.%m.%Y')

        # K·∫øt n·ªëi Google
        creds = google_handler.get_google_credentials()
        gspread_client = gspread.authorize(creds)
        drive_service = build('drive', 'v3', credentials=creds)

        year_folder_id = google_handler.get_or_create_gdrive_folder(
            drive_service, f"NƒÉm {reconcile_date.year}", config.GOOGLE_DRIVE_ROOT_FOLDER_ID
        )
        month_folder_id = google_handler.get_or_create_gdrive_folder(
            drive_service, f"Th√°ng {reconcile_date.month}", year_folder_id
        )

        # L·∫§Y D·ªÆ LI·ªÜU POS THEO LO·∫†I ƒê·ªêI SO√ÅT
        if reconcile_type == 'CongNo':
            try:
                pos_spreadsheet = gspread_client.open(f"CongNo.{date_str_dmy}", folder_id=month_folder_id)
            except gspread.exceptions.SpreadsheetNotFound:
                return jsonify({"status": "report_not_found", "message": f"Kh√¥ng t√¨m th·∫•y b√°o c√°o POS (CongNo) ng√†y {date_str_dmy}."})
            pos_sheet = pos_spreadsheet.worksheet('TongHopCongNo')
            pos_data = pos_sheet.get_all_values()
            pos_df = pd.DataFrame(pos_data[1:], columns=pos_data[0]) if len(pos_data) > 1 else pd.DataFrame()
        else:
            try:
                pos_spreadsheet = gspread_client.open(f"BCBH.{date_str_dmy}", folder_id=month_folder_id)
            except gspread.exceptions.SpreadsheetNotFound:
                return jsonify({"status": "report_not_found", "message": f"Kh√¥ng t√¨m th·∫•y b√°o c√°o POS (BCBH) ng√†y {date_str_dmy}."})
            pos_sheet = pos_spreadsheet.worksheet('TongHopBCBH')
            pos_data = pos_sheet.get_all_values()
            pos_df = pd.DataFrame(pos_data[1:], columns=pos_data[0]) if len(pos_data) > 1 else pd.DataFrame()

        # PH√ÇN LU·ªíNG ƒê·ªêI SO√ÅT
        if reconcile_type == 'SanLuong':
            sse_df = reconciliation_handler.read_sse_product_xml(sse_file.stream)
            if sse_df is None:
                return jsonify({"status": "error", "message": "ƒê·ªãnh d·∫°ng file k·∫ø to√°n (s·∫£n l∆∞·ª£ng) kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng th·ªÉ ƒë·ªçc."}), 400
            reconciliation_results = reconciliation_handler.reconcile_product_data(pos_df, sse_df)
        elif reconcile_type == 'TienMat':
            sse_df = reconciliation_handler.read_sse_cash_xml(sse_file.stream, reconcile_date)
            if sse_df is None:
                return jsonify({"status": "error", "message": "ƒê·ªãnh d·∫°ng file k·∫ø to√°n (ti·ªÅn m·∫∑t) kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng th·ªÉ ƒë·ªçc."}), 400
            reconciliation_results = reconciliation_handler.reconcile_cash_data(pos_df, sse_df)
        elif reconcile_type == 'CongNo':
            sse_df = reconciliation_handler.read_sse_debt_xml(sse_file.stream)
            if sse_df is None:
                return jsonify({"status": "error", "message": "ƒê·ªãnh d·∫°ng file k·∫ø to√°n (c√¥ng n·ª£) kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng th·ªÉ ƒë·ªçc."}), 400
            reconciliation_results = reconciliation_handler.reconcile_debt_data(pos_df, sse_df)
        else:
            return jsonify({"status": "error", "message": "Lo·∫°i ƒë·ªëi so√°t kh√¥ng h·ª£p l·ªá."}), 400

        return jsonify({"status": "success", "data": reconciliation_results, "reconcile_type": reconcile_type})

    except Exception as e:
        print(f"L·ªói khi ƒë·ªëi so√°t: {e}")
        return jsonify({"status": "error", "message": f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {str(e)}"}), 500

@app.route('/download_excel', methods=['POST'])
def download_excel():
    """T·∫°o v√† tr·∫£ v·ªÅ file Excel t·ª´ d·ªØ li·ªáu ƒë·ªëi so√°t."""
    try:
        json_data = request.get_json()
        results_data = json_data.get('data')
        reconcile_type = json_data.get('reconcile_type', 'SanLuong')

        if not results_data:
            return "No data received", 400

        df = pd.DataFrame(results_data)

        # ƒê·∫∑t t√™n c·ªôt theo lo·∫°i ƒë·ªëi so√°t
        if reconcile_type == 'TienMat':
            column_names = {
                'chxd_name': 'C·ª≠a h√†ng',
                'product_name': 'ƒê·ªëi t∆∞·ª£ng',
                'pos_value': 'Ti·ªÅn m·∫∑t POS (VND)',
                'sse_value': 'Ti·ªÅn m·∫∑t K·∫ø to√°n (VND)',
                'is_match': 'Kh·ªõp',
                'status': 'Ghi ch√∫'
            }
        elif reconcile_type == 'CongNo':
            column_names = {
                'chxd_name': 'C·ª≠a h√†ng',
                'customer_code': 'M√£ kh√°ch',
                'customer_name': 'T√™n kh√°ch h√†ng',
                'pos_value': 'Ph√°t sinh n·ª£ POS (VND)',
                'sse_value': 'Ph√°t sinh n·ª£ K·∫ø to√°n (VND)',
                'is_match': 'Kh·ªõp',
                'status': 'Ghi ch√∫'
            }
        else:  # SanLuong
            column_names = {
                'chxd_name': 'C·ª≠a h√†ng',
                'product_name': 'M·∫∑t h√†ng',
                'pos_value': 'S·∫£n l∆∞·ª£ng POS',
                'sse_value': 'S·∫£n l∆∞·ª£ng K·∫ø to√°n',
                'is_match': 'Kh·ªõp',
                'status': 'Ghi ch√∫'
            }

        # Ch·ªâ ƒë·ªïi t√™n c√°c c·ªôt c√≥ trong DataFrame
        df.rename(columns={k: v for k, v in column_names.items() if k in df.columns}, inplace=True)
        if 'Kh·ªõp' in df.columns:
            df['Kh·ªõp'] = df['Kh·ªõp'].apply(lambda x: 'Kh·ªõp' if bool(x) else 'L·ªách')

        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='KetQuaDoiSoat')
        output.seek(0)

        reconcile_date_str = datetime.now().strftime('%d-%m-%Y')
        filename = f"KetQuaDoiSoat_{reconcile_type}_{reconcile_date_str}.xlsx"

        return send_file(
            output,
            as_attachment=True,
            download_name=filename,
            mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
    except Exception as e:
        print(f"L·ªói khi t·∫°o file Excel: {e}")
        return "Error creating Excel file", 500

if __name__ == '__main__':
    # Local dev only
    app.run(host='0.0.0.0', port=8080, debug=False)
